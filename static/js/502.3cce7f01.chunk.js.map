{"version":3,"file":"static/js/502.3cce7f01.chunk.js","mappings":"wNAAO,IAAMA,EAAW,sCACXC,EACX,mEACWC,EACX,+F,gICFa,SAASC,EAAT,GAAwC,IAAnBC,EAAkB,EAAlBA,eAClC,GAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KAaA,OACE,0BACE,kBAAMC,SATW,SAAAC,GACnBA,EAAEC,iBACe,KAAjBJ,EAAMK,OACFC,MAAM,oDACNR,EAAeE,GACnBC,EAAS,GACV,EAGG,WACE,kBACEM,KAAK,QACLC,MAAOR,EACPS,SAjBkB,SAAAN,GACxBF,EAASE,EAAEO,OAAOF,MAAMG,cACzB,EAgBOC,KAAK,OACLC,aAAa,MACbC,WAAS,EACTC,YAAY,mBAEd,mBAAQH,KAAK,SAAb,wBAIP,C,iCCZD,EAjBmB,SAAC,GAAe,IAAbI,EAAY,EAAZA,MACdC,GAAWC,EAAAA,EAAAA,MACTC,EAA2BH,EAA3BG,GAAIC,EAAuBJ,EAAvBI,YAAaC,EAAUL,EAAVK,MACzB,OACE,+BACE,yBACE,UAAC,KAAD,CAASC,GAAE,kBAAaH,GAAMI,MAAO,CAAEC,KAAMP,GAA7C,WACE,gBACEQ,IAAKL,EAAc1B,EAAAA,GAAW0B,EAAczB,EAAAA,GAC5C+B,IAAKL,KAEP,wBAAKA,UAKd,ECPD,EAXmB,SAAC,GAAgB,IAAdM,EAAa,EAAbA,OACpB,OACE,+BACE,wBACGA,EAAOC,KAAI,SAAAZ,GAAK,OACf,SAAC,EAAD,CAAYA,MAAOA,GAAYA,EAAMG,GADtB,OAMxB,E,mBCwDD,EA5De,WAAO,IAAD,EACnB,GAA4BpB,EAAAA,EAAAA,UAAS,IAArC,eAAO4B,EAAP,KAAeE,EAAf,KACA,GAA0B9B,EAAAA,EAAAA,UAAS,IAAnC,eAAO+B,EAAP,KAAcC,EAAd,KACA,GAA4BhC,EAAAA,EAAAA,UAAS,QAArC,eAAOiC,EAAP,KAAeC,EAAf,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAS,UAAGF,EAAaG,IAAI,gBAApB,QAAgC,IAM/CC,EAAAA,EAAAA,YAAU,WAAM,wCAId,oGAEIN,EAAU,WAFd,UAG2BO,EAAAA,EAAAA,IAAkBH,GAH7C,OAGUI,EAHV,OAIIZ,EAAUY,GACVR,EAAU,YALd,gDAOIA,EAAU,YACVS,QAAQC,IAAR,MARJ,0DAJc,sBACI,KAAdN,GADU,mCAedO,EACD,GAAE,CAACP,KAEJE,EAAAA,EAAAA,YAAU,WAAM,wCAId,oGAEIN,EAAU,WAFd,UAG2BO,EAAAA,EAAAA,IAAkBV,GAH7C,OAGUW,EAHV,OAIIZ,EAAUY,GACVR,EAAU,YALd,gDAOIA,EAAU,YACVS,QAAQC,IAAR,MARJ,0DAJc,sBACA,KAAVb,GADU,mCAedc,EACD,GAAE,CAACd,IAMJ,OACE,4BACE,SAACjC,EAAD,CAAWC,eAPW,SAAAE,GACxB+B,EAAS/B,EAAMK,QAzCA,SAAAyB,GAEfM,EAD4B,KAAVN,EAAe,CAAEA,MAAAA,GAAU,CAAC,EAE/C,CAuCCe,CAAS7C,EAAMK,OAChB,IAMIsB,EAAOmB,OAAS,IAAK,SAAC,EAAD,CAAYnB,OAAQA,IAC9B,YAAXK,IAAwB,SAACe,EAAA,EAAD,MAG9B,C,oLChEDC,IAAAA,SAAAA,QAAyB,gCACzB,IAAMC,EAAU,mCAEHC,EAAa,mCAAG,6GAEFF,IAAAA,IAAA,qCAAwCC,IAFtC,cAEnBR,EAFmB,yBAGlBA,EAASU,KAAKC,SAHI,gCAKzBV,QAAQC,IAAR,MALyB,yDAAH,qDAWbH,EAAiB,mCAAG,WAAMV,GAAN,gFACzBuB,EAAS,IAAIC,gBAAgB,CACjCC,QAASN,EACTnB,MAAAA,IAH6B,kBAMNkB,IAAAA,IAAA,uBAA0BK,IANpB,cAMvBZ,EANuB,yBAOtBA,EAASU,KAAKC,SAPQ,gCAS7BV,QAAQC,IAAR,MAT6B,yDAAH,sDAajBa,EAAiB,mCAAG,WAAMC,GAAN,gGAENT,IAAAA,IAAA,gBAAmBS,EAAnB,oBAAsCR,IAFhC,cAEvBR,EAFuB,yBAGtBA,EAASU,MAHa,gCAK7BT,QAAQC,IAAR,MAL6B,yDAAH,sDASjBe,EAAc,mCAAG,WAAMD,GAAN,gGAEHT,IAAAA,IAAA,gBACZS,EADY,4BACeR,IAHZ,cAEpBR,EAFoB,yBAKnBA,EAASU,KAAKQ,MALK,gCAO1BjB,QAAQC,IAAR,MAP0B,yDAAH,qD","sources":["defaultImages/defaultImages.jsx","components/Searchbar/Searchbar.jsx","components/MoviesItem/MoviesItem.jsx","components/MoviesList/MoviesList.jsx","pages/Movies/Movies.jsx","services/api.js"],"sourcesContent":["export const DEF_PATH = 'https://www.themoviedb.org/t/p/w500';\nexport const DEF_IMG =\n  'https://en-images.kinorium.com/movie/1080/1662246.jpg?1556722314';\nexport const NO_PHOTO =\n  'https://spng.pngfind.com/pngs/s/5-52097_avatar-png-pic-vector-avatar-icon-png-transparent.png';\n","import { useState } from 'react';\n\nexport default function Searchbar({ getSearchQuery }) {\n  const [input, setInput] = useState('');\n\n  const handleInputChange = e => {\n    setInput(e.target.value.toLowerCase());\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    input.trim() === ''\n      ? alert('Search input is empty... Please enter a new word')\n      : getSearchQuery(input);\n    setInput('');\n  };\n  return (\n    <div>\n      <form onSubmit={handleSubmit}>\n        <input\n          name=\"input\"\n          value={input}\n          onChange={handleInputChange}\n          type=\"text\"\n          autoComplete=\"off\"\n          autoFocus\n          placeholder=\"Search movies\"\n        />\n        <button type=\"submit\">Search</button>\n      </form>\n    </div>\n  );\n}\n// export default Searchbar;\n","import { NavLink, useLocation } from 'react-router-dom';\nimport { DEF_PATH, DEF_IMG } from 'defaultImages/defaultImages';\n\nconst MoviesItem = ({ movie }) => {\n  const location = useLocation();\n  const { id, poster_path, title } = movie;\n  return (\n    <>\n      <li>\n        <NavLink to={`/movies/${id}`} state={{ from: location }}>\n          <img\n            src={poster_path ? DEF_PATH + poster_path : DEF_IMG}\n            alt={title}\n          />\n          <h3>{title}</h3>\n        </NavLink>\n      </li>\n    </>\n  );\n};\nexport default MoviesItem;\n","import MoviesItem from 'components/MoviesItem';\nconst MoviesList = ({ movies }) => {\n  return (\n    <>\n      <ul>\n        {movies.map(movie => (\n          <MoviesItem movie={movie} key={movie.id} />\n        ))}\n      </ul>\n    </>\n  );\n};\nexport default MoviesList;\n","import { useState, useEffect } from 'react';\nimport Searchbar from 'components/Searchbar';\nimport MoviesList from 'components/MoviesList';\nimport { fetchSearchMovies } from 'services/api';\nimport Loader from 'components/Loader';\nimport { useSearchParams } from 'react-router-dom';\n\nconst Movies = () => {\n  const [movies, setMovies] = useState([]);\n  const [query, setQuery] = useState('');\n  const [status, setStatus] = useState('idle');\n  const [searchParams, setSearchParams] = useSearchParams();\n  const movieName = searchParams.get('query') ?? '';\n  const newQuery = query => {\n    const newParams = query !== '' ? { query } : {};\n    setSearchParams(newParams);\n  };\n\n  useEffect(() => {\n    if (movieName === '') {\n      return;\n    }\n    async function getMomies() {\n      try {\n        setStatus('pending');\n        const response = await fetchSearchMovies(movieName);\n        setMovies(response);\n        setStatus('resolved');\n      } catch (error) {\n        setStatus('rejected');\n        console.log(error);\n      }\n    }\n    getMomies();\n  }, [movieName]);\n\n  useEffect(() => {\n    if (query === '') {\n      return;\n    }\n    async function getMomies() {\n      try {\n        setStatus('pending');\n        const response = await fetchSearchMovies(query);\n        setMovies(response);\n        setStatus('resolved');\n      } catch (error) {\n        setStatus('rejected');\n        console.log(error);\n      }\n    }\n    getMomies();\n  }, [query]);\n  const handleSearchQuery = input => {\n    setQuery(input.trim());\n    newQuery(input.trim());\n  };\n\n  return (\n    <div>\n      <Searchbar getSearchQuery={handleSearchQuery} />\n\n      {movies.length > 0 && <MoviesList movies={movies} />}\n      {status === 'pending' && <Loader />}\n    </div>\n  );\n};\nexport default Movies;\n","import Axios from 'axios';\n\nAxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst API_KEY = 'a56dfce00590e00de6e7abfd96a9065d';\n\nexport const fetchTrending = async () => {\n  try {\n    const response = await Axios.get(`trending/movie/day?api_key=${API_KEY}`);\n    return response.data.results;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n// https://api.themoviedb.org/3/trending/movie/day?api_key=<<api_key>>\n\nexport const fetchSearchMovies = async query => {\n  const params = new URLSearchParams({\n    api_key: API_KEY,\n    query,\n  });\n  try {\n    const response = await Axios.get(`search/movie?${params}`);\n    return response.data.results;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const fetchMovieDetails = async movieId => {\n  try {\n    const response = await Axios.get(`movie/${movieId}?api_key=${API_KEY}`);\n    return response.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const fetchMovieCast = async movieId => {\n  try {\n    const response = await Axios.get(\n      `movie/${movieId}/credits?api_key=${API_KEY}`\n    );\n    return response.data.cast;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const fetchMovieReview = async movieId => {\n  try {\n    const response = Axios.get(`movie/${movieId}/review?api_key=${API_KEY}`);\n    return response.data.results;\n  } catch (error) {\n    console.log(error);\n  }\n};\n"],"names":["DEF_PATH","DEF_IMG","NO_PHOTO","Searchbar","getSearchQuery","useState","input","setInput","onSubmit","e","preventDefault","trim","alert","name","value","onChange","target","toLowerCase","type","autoComplete","autoFocus","placeholder","movie","location","useLocation","id","poster_path","title","to","state","from","src","alt","movies","map","setMovies","query","setQuery","status","setStatus","useSearchParams","searchParams","setSearchParams","movieName","get","useEffect","fetchSearchMovies","response","console","log","getMomies","newQuery","length","Loader","Axios","API_KEY","fetchTrending","data","results","params","URLSearchParams","api_key","fetchMovieDetails","movieId","fetchMovieCast","cast"],"sourceRoot":""}