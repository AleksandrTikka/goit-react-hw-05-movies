{"version":3,"file":"static/js/417.9a96fd45.chunk.js","mappings":"8LAUaA,GAAMC,EAAAA,EAAAA,IAAO,MAAPA,CACjBC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,G,6KCdWC,EAAOP,EAAAA,GAAAA,GAAH,sJAMR,SAAAQ,GAAC,OAAIA,EAAEC,MAAMP,MAAM,EAAlB,IAEGQ,EAAWV,EAAAA,GAAAA,GAAH,wJACD,SAAAQ,GAAC,OAAIA,EAAEC,MAAMP,MAAM,EAAlB,IACQ,SAAAM,GAAC,OAAIA,EAAEC,MAAMP,MAAM,EAAlB,IAKjBS,EAAMX,EAAAA,GAAAA,IAAH,oI,mBCiChB,EA3Ca,WACX,IAAQY,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAwBE,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KAYA,IAXAC,EAAAA,EAAAA,YAAU,WAAM,wCACd,8GAE2BC,EAAAA,EAAAA,IAAeN,GAF1C,OAEUO,EAFV,OAGIH,EAAQG,GAHZ,gDAKIC,QAAQC,IAAR,MALJ,0DADc,uBAAC,WAAD,wBASdC,EACD,GAAE,CAACV,IACCG,EAIL,OACE,SAAChB,EAAA,EAAD,CAAKS,EAAE,IAAP,UACE,SAACD,EAAD,UACGQ,EAAKQ,KAAI,YAA4C,IAAzCC,EAAwC,EAAxCA,KAAMC,EAAkC,EAAlCA,aAAcC,EAAoB,EAApBA,GAAIC,EAAgB,EAAhBA,UACnC,OACE,SAACjB,EAAD,WACE,4BACE,SAACC,EAAD,CACEiB,IAAKH,EAAeI,EAAAA,GAAWJ,EAAeK,EAAAA,GAC9CC,IAAKP,KAEP,SAACzB,EAAA,EAAD,CAAKiC,GAAG,IAAIC,UAAU,SAAtB,SACGT,KAEH,UAACzB,EAAA,EAAD,CAAKiC,GAAG,IAAIC,UAAU,SAAtB,wBACcN,SAVHD,EAelB,OAIR,C,wGCjDM,IAAMG,EAAW,sCACXK,EACX,mEACWJ,EACX,+F,oLCFFK,IAAAA,SAAAA,QAAyB,gCACzB,IAAMC,EAAU,mCAEHC,EAAa,mCAAG,6GAEFF,IAAAA,IAAA,qCAAwCC,IAFtC,cAEnBjB,EAFmB,yBAGlBA,EAASmB,KAAKC,SAHI,gCAKzBnB,QAAQC,IAAR,MALyB,yDAAH,qDAWbmB,EAAiB,mCAAG,WAAMC,GAAN,gFACzBC,EAAS,IAAIC,gBAAgB,CACjCC,QAASR,EACTK,MAAAA,IAH6B,kBAMNN,IAAAA,IAAA,uBAA0BO,IANpB,cAMvBvB,EANuB,yBAOtBA,EAASmB,KAAKC,SAPQ,gCAS7BnB,QAAQC,IAAR,MAT6B,yDAAH,sDAajBwB,EAAiB,mCAAG,WAAMjC,GAAN,gGAENuB,IAAAA,IAAA,gBAAmBvB,EAAnB,oBAAsCwB,IAFhC,cAEvBjB,EAFuB,yBAGtBA,EAASmB,MAHa,gCAK7BlB,QAAQC,IAAR,MAL6B,yDAAH,sDASjBH,EAAc,mCAAG,WAAMN,GAAN,gGAEHuB,IAAAA,IAAA,gBACZvB,EADY,4BACewB,IAHZ,cAEpBjB,EAFoB,yBAKnBA,EAASmB,KAAKvB,MALK,gCAO1BK,QAAQC,IAAR,MAP0B,yDAAH,qD","sources":["components/Box.jsx","components/Cast/Cast.styled.js","components/Cast/Cast.jsx","defaultImages/defaultImages.jsx","services/api.js"],"sourcesContent":["import styled from 'styled-components';\nimport {\n  color,\n  space,\n  layout,\n  flexbox,\n  border,\n  typography,\n} from 'styled-system';\n\nexport const Box = styled('div')(\n  color,\n  space,\n  layout,\n  flexbox,\n  border,\n  typography\n);\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  list-style: none;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  align-items: center;\n  gap: ${p => p.theme.space[3]}px;\n`;\nexport const ListItem = styled.li`\n  padding-bottom: ${p => p.theme.space[5]}px;\n  flex-basis: calc((100% - ${p => p.theme.space[6]}px) / 5);\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n`;\nexport const Img = styled.img`\n  max-height: 250px;\n  object-fit: cover;\n  display: block;\n  margin-left: auto;\n  margin-right: auto;\n`;\n","import { DEF_PATH, NO_PHOTO } from 'defaultImages/defaultImages';\nimport { useEffect } from 'react';\nimport { useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchMovieCast } from 'services/api';\nimport { List, ListItem, Img } from './Cast.styled';\nimport { Box } from 'components/Box';\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState([]);\n  useEffect(() => {\n    async function getMovieCast() {\n      try {\n        const response = await fetchMovieCast(movieId);\n        setCast(response);\n      } catch (error) {\n        console.log(error);\n      }\n    }\n    getMovieCast();\n  }, [movieId]);\n  if (!cast) {\n    return;\n  }\n\n  return (\n    <Box p=\"4\">\n      <List>\n        {cast.map(({ name, profile_path, id, character }) => {\n          return (\n            <ListItem key={id}>\n              <div>\n                <Img\n                  src={profile_path ? DEF_PATH + profile_path : NO_PHOTO}\n                  alt={name}\n                />\n                <Box as=\"p\" textAlign=\"center\">\n                  {name}\n                </Box>\n                <Box as=\"p\" textAlign=\"center\">\n                  Character: {character}\n                </Box>\n              </div>\n            </ListItem>\n          );\n        })}\n      </List>\n    </Box>\n  );\n};\nexport default Cast;\n","export const DEF_PATH = 'https://www.themoviedb.org/t/p/w500';\nexport const DEF_IMG =\n  'https://en-images.kinorium.com/movie/1080/1662246.jpg?1556722314';\nexport const NO_PHOTO =\n  'https://spng.pngfind.com/pngs/s/5-52097_avatar-png-pic-vector-avatar-icon-png-transparent.png';\n","import Axios from 'axios';\n\nAxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst API_KEY = 'a56dfce00590e00de6e7abfd96a9065d';\n\nexport const fetchTrending = async () => {\n  try {\n    const response = await Axios.get(`trending/movie/day?api_key=${API_KEY}`);\n    return response.data.results;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n// https://api.themoviedb.org/3/trending/movie/day?api_key=<<api_key>>\n\nexport const fetchSearchMovies = async query => {\n  const params = new URLSearchParams({\n    api_key: API_KEY,\n    query,\n  });\n  try {\n    const response = await Axios.get(`search/movie?${params}`);\n    return response.data.results;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const fetchMovieDetails = async movieId => {\n  try {\n    const response = await Axios.get(`movie/${movieId}?api_key=${API_KEY}`);\n    return response.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const fetchMovieCast = async movieId => {\n  try {\n    const response = await Axios.get(\n      `movie/${movieId}/credits?api_key=${API_KEY}`\n    );\n    return response.data.cast;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const fetchMovieReview = async movieId => {\n  try {\n    const response = Axios.get(`movie/${movieId}/review?api_key=${API_KEY}`);\n    return response.data.results;\n  } catch (error) {\n    console.log(error);\n  }\n};\n"],"names":["Box","styled","color","space","layout","flexbox","border","typography","List","p","theme","ListItem","Img","movieId","useParams","useState","cast","setCast","useEffect","fetchMovieCast","response","console","log","getMovieCast","map","name","profile_path","id","character","src","DEF_PATH","NO_PHOTO","alt","as","textAlign","DEF_IMG","Axios","API_KEY","fetchTrending","data","results","fetchSearchMovies","query","params","URLSearchParams","api_key","fetchMovieDetails"],"sourceRoot":""}