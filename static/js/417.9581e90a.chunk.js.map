{"version":3,"file":"static/js/417.9581e90a.chunk.js","mappings":"8LAWaA,GAAMC,EAAAA,EAAAA,IAAO,MAAPA,CACjBC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,G,6KChBWC,EAAOR,EAAAA,GAAAA,GAAH,+JAMJ,SAAAS,GAAC,OAAIA,EAAEC,MAAMR,MAAM,EAAlB,IAEDS,EAAWX,EAAAA,GAAAA,GAAH,+FACD,SAAAS,GAAC,OAAIA,EAAEC,MAAMR,MAAM,EAAlB,IACY,SAAAO,GAAC,OAAIA,EAAEC,MAAMR,MAAM,EAAlB,IAErBU,EAAMZ,EAAAA,GAAAA,IAAH,iE,mBC6ChB,EApDa,WACX,IAAQa,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAwBE,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KAYA,IAXAC,EAAAA,EAAAA,YAAU,WAAM,wCACd,8GAE2BC,EAAAA,EAAAA,IAAeN,GAF1C,OAEUO,EAFV,OAGIH,EAAQG,GAHZ,gDAKIC,QAAQC,IAAR,MALJ,0DADc,uBAAC,WAAD,wBASdC,EACD,GAAE,CAACV,IACCG,EAIL,OACE,SAACjB,EAAA,EAAD,CAAKU,EAAE,IAAP,UACE,SAACD,EAAD,UACGQ,EAAKQ,KAAI,YAA4C,IAAzCC,EAAwC,EAAxCA,KAAMC,EAAkC,EAAlCA,aAAcC,EAAoB,EAApBA,GAAIC,EAAgB,EAAhBA,UACnC,OACE,SAACjB,EAAD,WACE,4BACE,SAACZ,EAAA,EAAD,CACE8B,GAAG,MACHC,QAAQ,OACRC,eAAe,SACfC,OAAO,QACPC,SAAS,QACTC,SAAS,SANX,UAQE,SAACtB,EAAD,CACEuB,IAAKT,EAAeU,EAAAA,GAAWV,EAAeW,EAAAA,GAC9CC,IAAKb,OAGT,SAAC1B,EAAA,EAAD,CAAK8B,GAAG,IAAIU,UAAU,SAAtB,SACGd,KAEH,UAAC1B,EAAA,EAAD,CAAK8B,GAAG,IAAIU,UAAU,SAAtB,wBACcX,SAnBHD,EAwBlB,OAIR,C,wGC1DM,IAAMS,EAAW,sCACXI,EACX,mEACWH,EACX,sI,4MCFFI,IAAAA,SAAAA,QAAyB,gCACzB,IAAMC,EAAU,mCAEHC,EAAa,mCAAG,6GAEFF,IAAAA,IAAA,qCAAwCC,IAFtC,cAEnBtB,EAFmB,yBAGlBA,EAASwB,KAAKC,SAHI,gCAKzBxB,QAAQC,IAAR,MALyB,yDAAH,qDAWbwB,EAAiB,mCAAG,WAAMC,GAAN,gFACzBC,EAAS,IAAIC,gBAAgB,CACjCC,QAASR,EACTK,MAAAA,IAH6B,kBAMNN,IAAAA,IAAA,uBAA0BO,IANpB,cAMvB5B,EANuB,yBAOtBA,EAASwB,KAAKC,SAPQ,gCAS7BxB,QAAQC,IAAR,MAT6B,yDAAH,sDAajB6B,EAAiB,mCAAG,WAAMtC,GAAN,gGAEN4B,IAAAA,IAAA,gBAAmB5B,EAAnB,oBAAsC6B,IAFhC,cAEvBtB,EAFuB,yBAGtBA,EAASwB,MAHa,gCAK7BvB,QAAQC,IAAR,MAL6B,yDAAH,sDASjBH,EAAc,mCAAG,WAAMN,GAAN,gGAEH4B,IAAAA,IAAA,gBACZ5B,EADY,4BACe6B,IAHZ,cAEpBtB,EAFoB,yBAKnBA,EAASwB,KAAK5B,MALK,gCAO1BK,QAAQC,IAAR,MAP0B,yDAAH,sDAWd8B,EAAiB,mCAAG,WAAMvC,GAAN,gGAEN4B,IAAAA,IAAA,gBACZ5B,EADY,4BACe6B,IAHT,cAEvBtB,EAFuB,yBAKtBA,EAASwB,KAAKC,SALQ,gCAO7BxB,QAAQC,IAAR,MAP6B,yDAAH,qD","sources":["components/Box.jsx","components/Cast/Cast.styled.js","components/Cast/Cast.jsx","defaultImages/defaultImages.jsx","services/api.js"],"sourcesContent":["import styled from 'styled-components';\nimport {\n  color,\n  space,\n  layout,\n  flexbox,\n  border,\n  typography,\n  shadow,\n} from 'styled-system';\n\nexport const Box = styled('div')(\n  color,\n  space,\n  layout,\n  flexbox,\n  border,\n  typography,\n  shadow\n);\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  list-style: none;\n  display: flex;\n  flex-wrap: wrap;\n  //   justify-content: center;\n  align-items: center;\n  row-gap: ${p => p.theme.space[4]}px;\n`;\nexport const ListItem = styled.li`\n  padding-bottom: ${p => p.theme.space[5]}px;\n  flex-basis: calc((100% - 4 * ${p => p.theme.space[4]}px) / 5);\n`;\nexport const Img = styled.img`\n  object-fit: cover;\n  display: block;\n`;\n","import { DEF_PATH, NO_PHOTO } from 'defaultImages/defaultImages';\nimport { useEffect } from 'react';\nimport { useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchMovieCast } from 'services/api';\nimport { List, ListItem, Img } from './Cast.styled';\nimport { Box } from 'components/Box';\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState([]);\n  useEffect(() => {\n    async function getMovieCast() {\n      try {\n        const response = await fetchMovieCast(movieId);\n        setCast(response);\n      } catch (error) {\n        console.log(error);\n      }\n    }\n    getMovieCast();\n  }, [movieId]);\n  if (!cast) {\n    return;\n  }\n\n  return (\n    <Box p=\"4\">\n      <List>\n        {cast.map(({ name, profile_path, id, character }) => {\n          return (\n            <ListItem key={id}>\n              <div>\n                <Box\n                  as=\"div\"\n                  display=\"flex\"\n                  justifyContent=\"center\"\n                  height=\"300px\"\n                  maxWidth=\"200px\"\n                  overflow=\"hidden\"\n                >\n                  <Img\n                    src={profile_path ? DEF_PATH + profile_path : NO_PHOTO}\n                    alt={name}\n                  />\n                </Box>\n                <Box as=\"p\" textAlign=\"center\">\n                  {name}\n                </Box>\n                <Box as=\"p\" textAlign=\"center\">\n                  Character: {character}\n                </Box>\n              </div>\n            </ListItem>\n          );\n        })}\n      </List>\n    </Box>\n  );\n};\nexport default Cast;\n","export const DEF_PATH = 'https://www.themoviedb.org/t/p/w500';\nexport const DEF_IMG =\n  'https://en-images.kinorium.com/movie/1080/1662246.jpg?1556722314';\nexport const NO_PHOTO =\n  'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQ_z58Dz951_gGtjU3bYqGsTCKODu_RRAh3WcZ7dfanzNN-vBi6WcjBpf6Rr4sa6qcdlrQ&usqp=CAU';\n","import Axios from 'axios';\n\nAxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst API_KEY = 'a56dfce00590e00de6e7abfd96a9065d';\n\nexport const fetchTrending = async () => {\n  try {\n    const response = await Axios.get(`trending/movie/day?api_key=${API_KEY}`);\n    return response.data.results;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n// https://api.themoviedb.org/3/trending/movie/day?api_key=<<api_key>>\n\nexport const fetchSearchMovies = async query => {\n  const params = new URLSearchParams({\n    api_key: API_KEY,\n    query,\n  });\n  try {\n    const response = await Axios.get(`search/movie?${params}`);\n    return response.data.results;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const fetchMovieDetails = async movieId => {\n  try {\n    const response = await Axios.get(`movie/${movieId}?api_key=${API_KEY}`);\n    return response.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const fetchMovieCast = async movieId => {\n  try {\n    const response = await Axios.get(\n      `movie/${movieId}/credits?api_key=${API_KEY}`\n    );\n    return response.data.cast;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const fetchMovieReviews = async movieId => {\n  try {\n    const response = await Axios.get(\n      `movie/${movieId}/reviews?api_key=${API_KEY}`\n    );\n    return response.data.results;\n  } catch (error) {\n    console.log(error);\n  }\n};\n"],"names":["Box","styled","color","space","layout","flexbox","border","typography","shadow","List","p","theme","ListItem","Img","movieId","useParams","useState","cast","setCast","useEffect","fetchMovieCast","response","console","log","getMovieCast","map","name","profile_path","id","character","as","display","justifyContent","height","maxWidth","overflow","src","DEF_PATH","NO_PHOTO","alt","textAlign","DEF_IMG","Axios","API_KEY","fetchTrending","data","results","fetchSearchMovies","query","params","URLSearchParams","api_key","fetchMovieDetails","fetchMovieReviews"],"sourceRoot":""}